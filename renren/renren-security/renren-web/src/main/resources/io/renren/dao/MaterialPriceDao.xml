<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.renren.dao.MaterialPriceDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="io.renren.entity.MaterialPriceEntity" id="materialPriceMap">
        <result property="id" column="id"/>
        <result property="materialId" column="material_id"/>
        <result property="gradeId" column="grade_id"/>
        <result property="integral" column="integral"/>
        <result property="price" column="price"/>
        <result property="unit" column="unit"/>
        <result property="createrId" column="creater_id"/>
        <result property="createTime" column="create_time"/>
        <result property="updaterId" column="updater_id"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

	<select id="queryObject" resultType="io.renren.entity.MaterialPriceEntity">
		select * from t_material_price where id = #{value}
	</select>

	<select id="queryList" resultType="io.renren.entity.MaterialPriceEntity">
		select * from t_material_price
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from t_material_price 
	</select>
	 
	<insert id="save" parameterType="io.renren.entity.MaterialPriceEntity" useGeneratedKeys="true" keyProperty="id">
		insert into t_material_price
		(
			`material_id`, 
			`grade_id`, 
			`integral`, 
			`price`, 
			`unit`, 
			`creater_id`, 
			`create_time`, 
			`updater_id`, 
			`update_time`
		)
		values
		(
			#{materialId}, 
			#{gradeId}, 
			#{integral}, 
			#{price}, 
			#{unit}, 
			#{createrId}, 
			#{createTime}, 
			#{updaterId}, 
			#{updateTime}
		)
	</insert>
	 
	<update id="update" parameterType="io.renren.entity.MaterialPriceEntity">
		update t_material_price 
		<set>
			<if test="materialId != null">`material_id` = #{materialId}, </if>
			<if test="gradeId != null">`grade_id` = #{gradeId}, </if>
			<if test="integral != null">`integral` = #{integral}, </if>
			<if test="price != null">`price` = #{price}, </if>
			<if test="unit != null">`unit` = #{unit}, </if>
			<if test="createrId != null">`creater_id` = #{createrId}, </if>
			<if test="createTime != null">`create_time` = #{createTime}, </if>
			<if test="updaterId != null">`updater_id` = #{updaterId}, </if>
			<if test="updateTime != null">`update_time` = #{updateTime}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from t_material_price where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from t_material_price where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
	
	<select id="checkPriceSettingChanged" parameterType="io.renren.entity.MaterialPriceEntity" resultType="Long">
		 select count(*) from t_material_price where id = #{id} and integral=#{integral} and price = #{price} and unit=#{unit}
	</select>
	
	<update id="updatePriceSettingStatus" parameterType="long">
		 update t_material_price set status = 10 where id = #{value};
	</update>
	
	<select id="getMaterialPriceSettings" resultType="io.renren.entity.MaterialPriceEntity">
		select
			gd.id				as	"gradeDefinition.id",
			gd.level			as	"gradeDefinition.level",
			gd.name				as	"gradeDefinition.name",
			gd.status			as	"gradeDefinition.status",
			gd.creater_id		as	"gradeDefinition.createrId",
			gd.create_time		as	"gradeDefinition.createTime",
			gd.updater_id		as	"gradeDefinition.updaterId",
			gd.update_time		as	"gradeDefinition.updateTime",
			mp.id				as  id,
			mp.material_id  	as  materialId,
			gd.id  				as  gradeId,
			mp.integral  		as  integral,
			mp.price  			as  price,
			mp.unit 			as  unit,
			mp.creater_id  		as  createrId,
			mp.create_time  	as  createTime,
			mp.updater_id  		as  updaderId,
			mp.update_time		as  updateTime
		 from t_grade_definition gd left join
		(
			select * from t_material_price where status = 0 
			and
			<if test="value == null">
			material_id is null
			</if>
			<if test="value != null">
			material_id = #{value}
			</if>
		) mp on gd.id = mp.grade_id order by gd.level
	</select>
	
</mapper>